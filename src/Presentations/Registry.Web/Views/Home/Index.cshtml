@{
    ViewData["Title"] = "Главная страница";
}
@using Registry.Web.Models
@using Registry.Web.Extensions
@model Registry.Web.Models.AreaModel

<div id="map"></div>

<div class="container-list">
    <div>
        @(Html.DevExtreme().DataGrid<AreaModel>()
                .ID("gridContainer")
                .ShowBorders(true)
                .OnRowInserted("createPolygon")
                .OnInitNewRow("onCreateArea")
                .OnRowRemoved("removePolygon")
                .OnRowUpdated("updatePolygon")
                .OnRowClick("selectPolygonOnMap")
                .DataSource(d => d.Mvc()
                    .Controller("Area")
                    .LoadAction("GetAreas")
                    .InsertAction("InsertArea")
                    .UpdateAction("UpdateArea")
                    .DeleteAction("DeleteArea")
                    .Key("Id")
                )
                .Paging(p => p.PageSize(8))
                .Editing(e => e.Mode(GridEditMode.Popup)
                   .AllowUpdating(true)
                   .AllowDeleting(true)
                   .AllowAdding(true)
                   .Popup(p => p
                        .Title(this.T("Area.Editor.Title"))
                        .ShowTitle(true)
                        .Width(700)
                        .Height(550)
                        .Position(pos => pos
                            .My(HorizontalAlignment.Center, VerticalAlignment.Top)
                            .At(HorizontalAlignment.Center, VerticalAlignment.Top)
                            .Of(new JS("window"))
                        )
                   )
                   .Form(f => f.ID("form")
                       .Items(items =>
                       {

                           items.AddGroup()
                                   .ColCount(1)
                                   .ColSpan(2)
                                   .Items(groupItems =>
                                   {
                                       groupItems.AddSimpleFor(m => m.FileId).Visible(false);
                                       groupItems.AddSimpleFor(m => m.Name).Label(t => t.Text(this.T("Model.Area.Display.Name")));
                                       groupItems.AddSimpleFor(m => m.CadastralNum).Label(t => t.Text(this.T("Model.Area.Display.CadastralNum")));
                                       groupItems.AddSimpleFor(m => m.InventoryNum).Label(t => t.Text(this.T("Model.Area.Display.InventoryNum")));
                                       
                                       groupItems.AddSimpleFor(m => m.AreaTypeId).Label(t => t.Text(this.T("Model.Area.Display.AreaTypeId")));
                                       groupItems.AddSimpleFor(m => m.AreaOwnershipTypeId).Label(t => t.Text(this.T("Model.Area.Display.AreaOwnershipTypeId")));
                                       groupItems.AddSimpleFor(m => m.FileId).Label(t => t.Text(this.T("Model.Area.Display.FileDetail"))).Editor(t=>t.TextBox().ID("fileId")).Visible(false);

                                       groupItems.AddSimpleFor(m => m.FileName)
                                       .Label(t => t.Text(this.T("Model.Area.Display.FileDetail")))
                                       .Editor(t => t.TextBox().ID("fileName").Disabled(true))
                                       .IsRequired(false);
                               });

                           items.AddSimple()
                                    .Template(@<text>
                                        @(Html.DevExtreme().FileUploader()
                                                    .Name("File")
                                                    .SelectButtonText(this.T("Common.Select.File"))
                                                    .Accept("*")
                                                    .Multiple(false)
                                                    .UploadUrl(Url.Action("Upload", "File"))
                                                    .UploadMode(FileUploadMode.Instantly)
                                                    .OnUploaded("fileUploader_onUploaded")

                                        )
                                        </text>);

                       }).OnInitialized("onFormInitialized"))
                    )
                    .Columns(columns =>
                    {

                        columns.Add().DataField("Name");
                        columns.Add().DataField("CadastralNum");
                        columns.Add().DataField("InventoryNum").Visible(false);
                        columns.Add().DataField("FileId").Visible(false);
                        columns.Add().DataField("FileName").Visible(false);

                        columns.AddFor(m => m.AreaTypeId)
                        .Width(125)
                        .Visible(false)
                        .Lookup(lookup => lookup
                            .DataSource(d => d.Mvc().Controller("Area").LoadAction("GetAreaTypes").Key("Id"))
                            .DisplayExpr("Name")
                            .ValueExpr("Id")
                        );

                        columns.AddFor(m => m.AreaOwnershipTypeId)
                        .Width(125)
                        .Visible(false)
                        .Lookup(lookup => lookup
                            .DataSource(d => d.Mvc().Controller("Area").LoadAction("GetAreaOwnershipTypes").Key("Id"))
                            .DisplayExpr("Name")
                            .ValueExpr("Id")
                        );

                    })
        )
    </div>

    <hr />

    @(Html.DevExtreme().Button()
                        .ID("polygonSaveButton")
                        .Text(this.T("Area.Polygon.Button.Save.Text"))
                        .Type(ButtonType.Danger)
                        .StylingMode(ButtonStylingMode.Contained)
                        .Visible(false)
                        .OnClick("savePolygon")
                    )
</div>

<script>
    function onFormInitialized(e) {
        var validationGroup = e.component.option("validationGroup");
        var formId = e.component.option("formID");
        
        var fileId;
        if (validationGroup.oldData)
            fileId = validationGroup.oldData.FileId;
        else
            return;
    }

    function getFormInstance() {
        return $("#form").dxForm("instance");
    }

    function selectBox_valueChanged(data) {
        getFormInstance().option("formData", data.value);
    }

    function fileUploader_onValueChanged(e) {
        console.log(getFormInstance());
        var files = e.value;
        if (files && files.length) {
            var reader = new FileReader();
            reader.onload = function (arg) {
                alert(1);
                getFormInstance().beginUpdate();
                getFormInstance().updateData("InventoryNum", arg.target.result);
                getFormInstance().endUpdate();
            };
            reader.readAsDataURL(files[0]);
        }
    }

    function fileUploader_onUploaded(e) {
        console.log(getFormInstance());
        var fileId = e.request.response;

        var validationGroup = getFormInstance().option("validationGroup");
        if (!validationGroup.type)
            validationGroup.type = "update";

        if (validationGroup.data)
            validationGroup.data.FileId = fileId;
        else
            validationGroup.data = { FileId: fileId };

        getFormInstance().option("validationGroup", validationGroup);

        var form = $("#form").dxForm({
            formData: { "FileId": fileId }
        }).dxForm("instance");
    }
</script>

